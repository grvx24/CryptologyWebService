@using CryptoWebService.Backend.ClassicalCiphers
<h2 class="title">Szyfr Vigenere'a</h2>
<div class="col-md-6">
    <div class="row">
        <div class="col-md-12">
            <h2 class="title" style="font-variant:normal">@Text.Encryptor</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label for="keyEncrypt">@Text.Key</label>
            <textarea class="form-control" rows="1" id="keyEncrypt"></textarea>
        </div>
        <div class="col-md-6">
            <label for="alphabetEncrypt">@Text.ChooseAlphabet</label>
            <select id="alphabetEncrypt" class="form-control">
                @{
                    for (int i = 0; i < Alphabets.AVAILABLE_ALPHABETS_NAME.Length; i++)
                    {
                        @Html.Raw("<option value=" + i + ">" + Alphabets.AVAILABLE_ALPHABETS_NAME[i] + "</option>")
                    }
                }
            </select>
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            <div class="col-md-12">
                <label for="inputEncrypt" style="margin-top:5px">Tekst do zaszyfrowania</label>
                <textarea class="form-control" rows="5" id="inputEncrypt" maxlength="1000000" placeholder="@Text.WriteTextToEncrypt"></textarea>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        <span class="col-md-8">
            <label class="input-group">
                <span class="btn btn-success" style="margin-top: 5px;">
                    Wczytaj z pliku<input id="fileText" accept="text/plain" type="file" onchange="loadFileToEncrypt()" style="display: none;">
                </span>
            </label>
        </span>
    </div>
    <div class="row">
        <div class="form-group">
            <div class="col-md-12">
                <label for="outputEncrypt" style="margin-top:5px">@Text.EncryptedText</label>
                <textarea readonly class="form-control" rows="5" id="outputEncrypt"></textarea>
            </div>
        </div>
    </div>
    <div class="row">
        <span class="col-md-6">
            <button style="margin-top: 5px" class="btn btn-primary" id="encryptButton" type="submit">@Text.Encrypt</button>
            <button style="margin-top: 5px;" class="btn btn-success" id="saveButton" onclick="saveEncryptedAsFile()" type="submit">Zapisz do pliku</button>
        </span>
    </div>

    <div class="row">
        <div class="col-md-12">
            <h3>@Text.AvailableCharacters</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <p style="word-break: break-all;" id="availableCharsEncrypt">@Alphabets.ALPHABET_EN</p>
        </div>
    </div>
</div>

<div class="col-md-6">
    <div class="row">
        <div class="col-md-12">
            <h2 class="title" style="font-variant:normal">@Text.Decryptor</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <label for="keyDecrypt">@Text.Key</label>
            <textarea class="form-control" rows="1" id="keyDecrypt"></textarea>
        </div>
        <div class="col-md-6">
            <label for="alphabetDecrypt">@Text.ChooseAlphabet</label>
            <select id="alphabetDecrypt" class="form-control">
                @{
                    for (int i = 0; i < Alphabets.AVAILABLE_ALPHABETS_NAME.Length; i++)
                    {
                        @Html.Raw("<option value=" + i + ">" + Alphabets.AVAILABLE_ALPHABETS_NAME[i] + "</option>")
                    }
                }
            </select>
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            <div class="col-md-12">
                <label for="inputDecrypt" style="margin-top:5px">Tekst do odszyfrowania</label>
                <textarea class="form-control" rows="5" id="inputDecrypt" maxlength="1000000" placeholder="@Text.WriteTextToDecrypt"></textarea>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="row">
        <span class="col-md-8">
            <label class="input-group">
                <span class="btn btn-success" style="margin-top: 5px;">
                    Wczytaj z pliku<input id="fileTextDecrypt" accept="text/plain" type="file" onchange="loadFileToDecrypt()" style="display: none;">
                </span>
            </label>
        </span>
    </div>
    <div class="row">
        <div class="form-group">
            <div class="col-md-12">
                <label for="outputDecrypt" style="margin-top:5px">@Text.DecryptedText</label>
                <textarea readonly class="form-control" rows="5" id="outputDecrypt"></textarea>
            </div>
        </div>
    </div>
    <div class="row">
        <span class="col-md-6">
            <button style="margin-top: 5px" class="btn btn-primary" id="decryptButton" type="submit">@Text.Decrypt</button>
            <button style="margin-top: 5px;" class="btn btn-success" id="saveButton" onclick="saveDecryptedAsFile()" type="submit">Zapisz do pliku</button>
        </span>
    </div>

    <div class="row">
        <div class="col-md-12">
            <h3>@Text.AvailableCharacters</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <p style="word-break: break-all;" id="availableCharsDecrypt"> @Alphabets.ALPHABET_EN</p>
        </div>
    </div>
</div>

<script>
     $("#alphabetEncrypt").on('change',
        function() {
            var paragraph = $("#availableCharsEncrypt");
            var selectedAlphabet = $("#alphabetEncrypt").prop("selectedIndex");
            switch (selectedAlphabet) {
            case 0:
                paragraph.html('@Alphabets.ALPHABET_EN');
                break;
            case 1:
                paragraph.html('@Alphabets.ALPHABET_PL');
                break;
            case 2:
                paragraph.html('@Alphabets.ALPHABET_EN_DIGITS');
                break;
            case 3:
                paragraph.html('@Alphabets.ALPHABET_PL_DIGITS');
                break;
            case 4:
                paragraph.html('@Alphabets.ALPHABET_EN_EXTENDED');
                break;
            case 5:
                paragraph.html('@Alphabets.ALPHABET_PL_EXTENDED');
                break;
            }
        });

    $("#alphabetDecrypt").on('change',
        function() {
            var paragraph = $("#availableCharsDecrypt");
            var selectedAlphabet = $("#alphabetDecrypt").prop("selectedIndex");
            switch (selectedAlphabet) {
                case 0:
                    paragraph.html('@Alphabets.ALPHABET_EN');
                    break;
                case 1:
                    paragraph.html('@Alphabets.ALPHABET_PL');
                    break;
                case 2:
                    paragraph.html('@Alphabets.ALPHABET_EN_DIGITS');
                    break;
                case 3:
                    paragraph.html('@Alphabets.ALPHABET_PL_DIGITS');
                    break;
                case 4:
                    paragraph.html('@Alphabets.ALPHABET_EN_EXTENDED');
                    break;
                case 5:
                    paragraph.html('@Alphabets.ALPHABET_PL_EXTENDED');
                    break;
            }
        });



    //Ajax
    var vignereInit = VigenereCipherInit({
        urls: {
            encryptUrl: '@Url.Action("VigenereEncrypt", "ClassicalCiphers")',
            decryptUrl: '@Url.Action("VigenereDecrypt", "ClassicalCiphers")'
        }
    });

    vignereInit.init();
</script>
