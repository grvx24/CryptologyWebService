@using CryptoWebService.Backend.ClassicalCiphers
@{
    ViewData["Title"] = "Caesar";
}
<script src="~/js/ciphers/ClassicalCiphers.js"></script>
<link rel="stylesheet" type="text/css" href="~/css/classical_ciphers.css">

<div class="container">
    <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'Description')">@Text.Description</button>
        <button id="defaultPageButton" class="tablinks" onclick="openTab(event, 'Working')">@Text.Action</button>
    </div>

    <div id="Description" class="tabcontent">
        <h2>@Text.Description</h2>
        <p>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus eu sapien mattis, condimentum erat eleifend, molestie nibh. Mauris pharetra suscipit felis, ac efficitur ante accumsan sed. Phasellus tincidunt maximus nibh, ac hendrerit mi pharetra id. Nunc fermentum nulla erat, commodo hendrerit risus bibendum ut. In et metus nec dui venenatis viverra. Vivamus eu urna orci. Sed ac risus elit. Suspendisse potenti. Cras facilisis ac augue eget iaculis. Vestibulum non sagittis neque.

            Morbi semper neque in erat lacinia, quis porta sapien fringilla. Vivamus consectetur fermentum quam sed convallis. Pellentesque tincidunt scelerisque odio non lacinia. Donec faucibus, metus vel finibus iaculis, augue neque ullamcorper ex, a vehicula ante mi egestas velit. Fusce ut nibh pellentesque, mattis sapien sit amet, ullamcorper nisl. Pellentesque gravida, elit eleifend pretium finibus, felis justo rhoncus magna, et mollis turpis metus ut neque. Vivamus eu consectetur tellus. Nulla dapibus, urna eu viverra gravida, urna libero tempor augue, ut hendrerit libero ante ac tortor. Etiam at vestibulum elit. Maecenas ut ornare quam. Praesent mi ex, efficitur ac aliquam at, iaculis sed sapien. Mauris scelerisque, nunc sit amet dignissim commodo, sapien dolor viverra lorem, eu rhoncus ex augue ac tellus. Nunc blandit iaculis imperdiet.

            Nullam porttitor ex luctus efficitur placerat. Proin sed accumsan orci, id ultricies massa. Suspendisse porta dictum venenatis. Sed ut sodales sapien, ut vulputate nibh. Pellentesque sit amet nisi dui. Vivamus at ipsum imperdiet nulla lacinia convallis. Nulla pretium urna non ligula luctus pretium. Aliquam sed malesuada diam, vel commodo libero.

            Nullam ut lectus eu sem feugiat luctus at et purus. In accumsan lacinia consectetur. Sed vehicula erat est, finibus suscipit quam vestibulum sed. Sed viverra ipsum ullamcorper, eleifend ligula ultricies, faucibus sapien. Proin nec purus eget nibh dictum varius. Etiam felis magna, malesuada in hendrerit at, ullamcorper sit amet nunc. Quisque a risus a magna mattis mattis. Etiam consectetur nisi vel diam vulputate, at faucibus libero tristique. Fusce sed auctor est, sed interdum metus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Proin finibus orci turpis, sit amet dictum diam pulvinar quis. Integer eros sapien, congue at quam in, eleifend tristique augue.

        </p>
    </div>
    <div id="Working" class="tabcontent col-lg-12">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <h2 align="center">@Text.Encryptor</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <label for="keyEncrypt">@Text.Key</label>
                    <select id="keyEncrypt" class="form-control">
                        @{
                            for (int i = 1; i <= 50; i++)
                            {
                                @Html.Raw("<option value=" + i + ">" + i + "</option>")
                            }
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="alphabetEncrypt">@Text.ChooseAlphabet</label>
                    <select id="alphabetEncrypt" class="form-control">
                        @{
                            for (int i = 0; i < Alphabets.AVAILABLE_ALPHABETS_NAME.Length; i++)
                            {
                                @Html.Raw("<option value=" + i + ">" + Alphabets.AVAILABLE_ALPHABETS_NAME[i] + "</option>")
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-md-12">
                        <label for="inputEncrypt">@Text.WriteTextToEncrypt</label>
                        <textarea class="form-control" rows="5" id="inputEncrypt"></textarea>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-md-12">
                        <label for="outputEncrypt">@Text.EncryptedText</label>
                        <textarea class="form-control" rows="5" id="outputEncrypt"></textarea>
                    </div>
                </div>
            </div>
            <div class="row">
                <span class="col-md-6">
                    <button style="margin-top: 5px" class="btn btn-primary" id="encryptButton" type="submit">@Text.Encrypt</button>
                </span>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <h3>@Text.AvailableCharacters</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <p style="word-break: break-all;" id="availableCharsEncrypt">@Alphabets.ALPHABET_EN</p>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <h2 align="center">@Text.Decryptor</h2>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <label for="keyDecrypt">@Text.Key</label>
                    <select id="keyDecrypt" class="form-control">
                        @{
                            for (int i = 1; i <= 50; i++)
                            {
                                @Html.Raw("<option value=" + i + ">" + i + "</option>")
                            }
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="alphabetDecrypt">@Text.ChooseAlphabet</label>
                    <select id="alphabetDecrypt" class="form-control">
                        @{
                            for (int i = 0; i < Alphabets.AVAILABLE_ALPHABETS_NAME.Length; i++)
                            {
                                @Html.Raw("<option value=" + i + ">" + Alphabets.AVAILABLE_ALPHABETS_NAME[i] + "</option>")
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-md-12">
                        <label for="inputDecrypt">@Text.WriteTextToDecrypt</label>
                        <textarea class="form-control" rows="5" id="inputDecrypt"></textarea>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-md-12">
                        <label for="outputDecrypt">@Text.DecryptedText</label>
                        <textarea class="form-control" rows="5" id="outputDecrypt"></textarea>
                    </div>
                </div>
            </div>
            <div class="row">
                <span class="col-md-6">
                    <button style="margin-top: 5px" class="btn btn-primary" id="decryptButton" type="submit">@Text.Decrypt</button>
                </span>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <h3>@Text.AvailableCharacters</h3>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <p style="word-break: break-all;" id="availableCharsDecrypt"> @Alphabets.ALPHABET_EN</p>
                </div>
            </div>
        </div>
    </div>
</div>


<script>

    document.getElementById("defaultPageButton").click();

    function openTab(evt, tabName) {
        var i;
        var tabContent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabContent.length; i++) {
            tabContent[i].style.display = "none";
        }
        var tabLinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tabLinks.length; i++) {
            tabLinks[i].className = tabLinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    $("#alphabetEncrypt").on('change',
        function() {
            var paragraph = $("#availableCharsEncrypt");
            var selectedAlphabet = $("#alphabetEncrypt").prop("selectedIndex");
            switch (selectedAlphabet) {
            case 0:
                paragraph.html('@Alphabets.ALPHABET_EN');
                break;
            case 1:
                paragraph.html('@Alphabets.ALPHABET_PL');
                break;
            case 2:
                paragraph.html('@Alphabets.ALPHABET_EN_DIGITS');
                break;
            case 3:
                paragraph.html('@Alphabets.ALPHABET_PL_DIGITS');
                break;
            case 4:
                paragraph.html('@Alphabets.ALPHABET_EN_EXTENDED');
                break;
            case 5:
                paragraph.html('@Alphabets.ALPHABET_PL_EXTENDED');
                break;
            }
        });

    $("#alphabetDecrypt").on('change',
        function() {
            var paragraph = $("#availableCharsDecrypt");
            var selectedAlphabet = $("#alphabetDecrypt").prop("selectedIndex");
            switch (selectedAlphabet) {
                case 0:
                    paragraph.html('@Alphabets.ALPHABET_EN');
                    break;
                case 1:
                    paragraph.html('@Alphabets.ALPHABET_PL');
                    break;
                case 2:
                    paragraph.html('@Alphabets.ALPHABET_EN_DIGITS');
                    break;
                case 3:
                    paragraph.html('@Alphabets.ALPHABET_PL_DIGITS');
                    break;
                case 4:
                    paragraph.html('@Alphabets.ALPHABET_EN_EXTENDED');
                    break;
                case 5:
                    paragraph.html('@Alphabets.ALPHABET_PL_EXTENDED');
                    break;
            }
        });



    //Ajax
    var caesarInit = CaesarCipherInit({
        urls: {
            encryptUrl: '@Url.Action("CaesarEncrypt", "ClassicalCiphers")',
            decryptUrl: '@Url.Action("CaesarDecrypt", "ClassicalCiphers")'
        }
    });

    caesarInit.init();
</script>
