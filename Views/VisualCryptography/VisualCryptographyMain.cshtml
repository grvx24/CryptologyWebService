
@{
    ViewData["Title"] = "Secret";
}
<script src="https://cdn.rawgit.com/konvajs/konva/2.4.0/konva.min.js"></script>
<script src="~/js/visualCryptography/VisualCryptography.js"></script>

<h2 class="page-header">Kryptografia Wizualna</h2>
<div class=" col-lg-12">
    <div class="body-content">
        Koncepcja kryptografii wizualnej narodziła się około 10 lat temu na konferencji Eurocrypt
        94. Podczas swojej prelekcji Shamir i Naor zaproponowali nowy sposób graficznego
        kodowania informacji. Jego podstawą było wykorzystanie określonej liczby
        podobrazów zwanych udziałami. Ich nałożenie na siebie dawało obraz zawierający
        tajną wiadomość. W efekcie odszyfrowanie informacji byłoby możliwe jedynie przy
        użyciu wzroku — stąd nazwa metody. Ale po kolei.
    </div>
    <div id="Secret" class=" col-lg-12">
        <div id="container" class="myCanvas">
        </div>
    </div>
    <div>
        <br />
        <br />
    </div>
    <div class="body-content">
        Każdy obraz cyfrowy składa się z tzw. pikseli (ang. pixels). Są to malutkie kwadraty
        wypełnione jednolitym kolorem. Położone obok siebie w rzędach i kolumnach tworzą
        obraz, który widzimy na ekranie komputera. Koncepcja udziałów (ang. shares) zakłada
        podział pikseli na jeszcze mniejsze części, tzw. subpiksele. Piksele oryginalnego
        obrazu zawierającego tajną wiadomość są dzielone na subpiksele. Ich liczba zależy od
        liczby udziałów, które chcemy uzyskać. Na rysunku 3.8 znajduje się najprostszy możliwy
        schemat podziału oparty na obrazie czarno-białym.
    </div>
    <div>
        <br />
        <br />
    </div>
    <div class="body-content">
        Jak widać, każdy udział składa się z dwóch subpikseli. W wyniku nałożenia na siebie
        udziałów piksela białego otrzymamy obraz składający się z białego i czarnego subpiksela,
        co da w efekcie wrażenie koloru szarego. Udziały piksela czarnego po nałożeniu
        dają obraz pierwotny. Obrazy składające się z udziałów nie dają żadnych informacji o zaszyfrowanej
        wiadomości, ponieważ każda kombinacja subpikseli pojawia się z prawdopodobieństwem
        50%, co jest równoważne z rozkładem losowym. Kiedy oba obrazy
        zostaną na siebie nałożone, ukaże się obraz pierwotny (z tą różnicą, iż jego białe obszary
        będą teraz widoczne jako szare). Można oczywiście dzielić piksele na więcej części,
        tworząc tym samym więcej udziałów.
    </div>
</div>




<style>
    .myCanvas {
        background-color: #F0F0F0;
    }
</style>

<script>
    var x2 = document.getElementById("container");
    var width2 = x2.offsetWidth;
    var height2 = 400;

    var stage = new Konva.Stage({
        container: 'container',
        width: width2,
        height: height2
    });
    var layer = new Konva.Layer();
    stage.add(layer);

    var StaticImage = new Konva.Image({
        x: 5,
    });
    layer.add(StaticImage);

    var image = new Image();
    image.onload = function () {
        StaticImage.image(image);
        layer.draw();
    };
    image.src = '/images/1.bmp';

    var AnimationImage = new Konva.Image({});
    layer.add(AnimationImage);

    var image = new Image();
    image.onload = function () {
        AnimationImage.image(image);
        layer.draw();
    };
    image.src = '/images/2.bmp';
    
    var amplitude = 10;
    var period = 20000;

    var anim = new Konva.Animation(function (frame) {
        AnimationImage.setX(amplitude * Math.sin(frame.time * 2 * Math.PI / period));
    }, layer);

    anim.start();
</script>