@using CryptoWebService.Helpers;
@model PageViewModel;

<div class="row row-eq-height">
    <div class="col-lg-12">
        <div class="col-lg-10" style="display: flex;flex-direction: column; height:100%;">
            <label class="form-control" style="height: 100%;font-size:18px; font-weight:normal" id="MethodDescription">
                Poniżej możesz sprawdzić w praktyce jak działa steganografia wizualna.
                Steganografia wizualna polega na zaszyciu informacji ( obrazu ) w dóch osobnych obrazach,
                jest ona na pierwszy rzut oka nie widoczna. Widoczna dopiero staje się po dokładnym nałożeniu dwóch obrazów na siebie.
            </label>
        </div>
        <div class="col-lg-2 myBackground">
            <div class="glyphicon glyphicon-search" style="font-size:150px;"></div>
        </div>
    </div>
</div>

<div class="row ">

</div>

<div class="col-lg-12">
    <hr />
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="col-lg-4">
            <label class="ImageHeader">Udział #1</label>
        </div>
        <div class="col-lg-8">
            <label for="inputModeSelect0">wybierz źródło obrazu:</label>
            <select id="inputModeSelect0" class="form-control" style="margin-bottom: 20px">
                <option value="drawing" selected>Rysunek</option>
                <option value="file">Plik</option>
            </select>
        </div>
    </div>
    <div class="col-lg-12">
        <div id="FileUploadPanel0" style="display: none">
            <div class="col-lg-12">
                @{
                    await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image0");
                }
            </div>
        </div>
        <div id="drawingPanel0">
            <div id="DrawingContainer0" class="myCanvas">

            </div>
            <div class="text-center mySignature">Pole do rysowania (Udział #1)</div>
        </div>
    </div>
</div>



<div class="col-lg-12">
    <hr />
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="col-lg-4">
            <label class="ImageHeader">Udział #2</label>
        </div>
        <div class="col-lg-8">
            <label for="inputModeSelect1">wybierz źródło obrazu:</label>
            <select id="inputModeSelect1" class="form-control" style="margin-bottom: 20px">
                <option value="drawing" selected>Rysunek</option>
                <option value="file">Plik</option>
            </select>
        </div>
    </div>
    <div class=" col-lg-12">
        <div id="FileUploadPanel1" style="display: none">
            <div class="col-lg-12">
                @{
                    await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image1");
                }
            </div>
        </div>
        <div id="drawingPanel1">
            <div id="DrawingContainer1" class="myCanvas">

            </div>
            <div class="text-center mySignature">Pole do rysowania (Udział #2)</div>
        </div>
    </div>
</div>

<div class="col-lg-12">
    <hr />
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="col-lg-4">
            <label class="ImageHeader">Ukrywany obraz</label>
        </div>
        <div class="col-lg-8">
            <label for="inputModeSelect2">wybierz źródło obrazu:</label>
            <select id="inputModeSelect2" class="form-control" style="margin-bottom: 20px">
                <option value="drawing" selected>Rysunek</option>
                <option value="file">Plik</option>
            </select>
        </div>
    </div>
    <div class=" col-lg-12">
        <div id="FileUploadPanel2" style="display: none">
            <div class="col-lg-12">
                @{
                    await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image2");
                }
            </div>
        </div>
        <div id="drawingPanel2">
            <div id="DrawingContainer2" class="myCanvas">

            </div>
            <div class="text-center mySignature">Pole do rysowania (Ukrywany obraz)</div>
        </div>
    </div>
</div>

<div class="row">
    <div class=" col-lg-12">
        <div class="text-center">
            <div class="alert alert-danger" id="ErrorPanel" style="margin-top:10px; display:none; font-size:16px;">
            </div>
            <button class="btn btn-primary" style="margin-top: 20px" id="sendCanvasToDivide">Ukryj obraz!</button>

            <div id="loading" class="loader" style="display:none"></div>
        </div>
    </div>
</div>
<div id="PanelFinalResult" style="display:none">
    <div class="col-lg-12">
        <hr />
    </div>

    <div id="secretsDownload" class="text-center">

    </div>
    <div class="row">
        <div class="col-lg-12">
            <div id="Secret">
                <div id="DisplayContainer" class="myCanvas">

                </div>
                <div class="text-center mySignature">Podgląd sekretów</div>
            </div>
        </div>
    </div>
</div>



<style>
    .ImageHeader {
        color: #1c5aa6;
        font-size: 18px;
    }

    .myBackground {
        background-image: url("/images/black_and_white.png");
        background-repeat: no-repeat;
    }
    .ImageDescription {
        font-size: 16px;
    }

    .row-eq-height {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
    }

    .myCanvas {
        background-color: #F0F0F0;
        border: 1px solid black;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .mySignature {
        font-style: italic;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .myDownload {
        margin: 10px;
        font-size: 30px;
        margin-top: 10px;
        margin-bottom: 20px;
    }

</style>

<script>
    var isPaint = false;
    var lastPointerPosition;
    var DisplayLayer = new Konva.Layer();

    $(document).ready(function () {
        $("#MethodSelect").val("1").change();

        InitDrawingKonvoControl('DrawingContainer0', 300);
        InitDrawingKonvoControl('DrawingContainer1', 300);
        InitDrawingKonvoControl('DrawingContainer2', 300);
        InitInputSelect(0);
        InitInputSelect(1);
        InitInputSelect(2);
        InitDisplayKonvoControl('DisplayContainer', 600);
    });

    function InitInputSelect(number) {
        $('#inputModeSelect' + number).on('change', function () {
            if (this.value === 'drawing') {
                $('#FileUploadPanel' + number).hide();
                $('#drawingPanel' + number).show();

            } else if (this.value === 'file') {
                $('#FileUploadPanel' + number).show();
                $('#drawingPanel' + number).hide();
            }
            else {
                Console.log("InputModeSelect" + number + " value is unknow.")
            }
        });
    }

    function GetWidth() {
        var width = document.getElementById('Description').offsetWidth;
        if (width === 0) {

            width = document.getElementById('Tools').offsetWidth;

            if (width === 0) {

                width = 400;

            }
        }
        return width - 28;
    }

    function InitDisplayKonvoControl(stageName, stageHeight)
    {
        var stage = new Konva.Stage({
            container: stageName,
            width: GetWidth(),
            height: stageHeight
        });

        stage.add(DisplayLayer);

        DisplayLayer.on('mouseover', function (evt) {
            var shape = evt.target;
            document.body.style.cursor = 'pointer';
            DisplayLayer.draw();
        });

        DisplayLayer.on('mouseout', function (evt) {
            var shape = evt.target;
            document.body.style.cursor = 'default';
            shape.scaleX(1);
            shape.scaleY(1);
            DisplayLayer.draw();
        });

        var scrollLayers = new Konva.Layer();
        stage.add(scrollLayers);

        const PADDING = 5;

        var verticalBar = new Konva.Rect({
            width: 10,
            height: 100,
            fill: 'grey',
            opacity: 0.8,
            x: stage.width() - PADDING - 10,
            y: PADDING,
            draggable: true,
            dragBoundFunc: function (pos) {
                pos.x = stage.width() - PADDING - 10;
                pos.y = Math.max(Math.min(pos.y, stage.height() - this.height() - PADDING), PADDING);
                return pos;
            }
        });
        scrollLayers.add(verticalBar);
        scrollLayers.draw();

        verticalBar.on('dragmove', function () {
            const availableHeight = stage.height() - PADDING * 2 - verticalBar.height();
            var delta = (verticalBar.y() - PADDING) / availableHeight;

            DisplayLayer.y(-stage.height() * delta);
            DisplayLayer.batchDraw();
        });

        var horizontalBar = new Konva.Rect({
            width: 100,
            height: 10,
            fill: 'grey',
            opacity: 0.8,
            x: PADDING,
            y: stage.height() - PADDING - 10,
            draggable: true,
            dragBoundFunc: function (pos) {
                pos.x = Math.max(Math.min(pos.x, stage.width() - this.width() - PADDING), PADDING);
                pos.y = stage.height() - PADDING - 10;

                return pos;
            }
        });
        scrollLayers.add(horizontalBar);
        scrollLayers.draw();

        horizontalBar.on('dragmove', function () {
            const availableWidth = stage.width() - PADDING * 2 - horizontalBar.width();
            var delta = (horizontalBar.x() - PADDING) / availableWidth;

            DisplayLayer.x(-stage.width() * delta);
            DisplayLayer.batchDraw();
        });
    }

    function InitDrawingKonvoControl(stageName, stageHeight)
    {
        var stage = new Konva.Stage({
            container: stageName,
            width: GetWidth(),
            height: stageHeight,
        });

        var layer = new Konva.Layer();
        stage.add(layer);

        var canvas = document.createElement('canvas');
        canvas.width = stage.width();
        canvas.height = stage.height();

        var image = new Konva.Image({
            image: canvas
        });

        layer.add(image);
        stage.draw();

        var context = canvas.getContext('2d');
        context.strokeStyle = "black";
        context.lineWidth = 5;

        image.on('mousedown touchstart', function () {
            isPaint = true;
            lastPointerPosition = stage.getPointerPosition();
        });

        stage.addEventListener('mouseup touchend', function () {
            isPaint = false;
        });

        stage.addEventListener('mousemove touchmove', function () {
            if (!isPaint) {
                return;
            }
            context.globalCompositeOperation = 'source-over';
            context.strokeStyle = "black";
            context.beginPath();

            var localPos = {
                x: lastPointerPosition.x - image.x(),
                y: lastPointerPosition.y - image.y()
            };
            context.moveTo(localPos.x, localPos.y);
            var pos = stage.getPointerPosition();
            localPos = {
                x: pos.x - image.x(),
                y: pos.y - image.y()
            };
            context.lineTo(localPos.x, localPos.y);
            context.closePath();
            context.stroke();

            lastPointerPosition = pos;
            layer.batchDraw();
        });
    }

    function LoadImageToLayerFromData(layer, data) {
        var KonvoImage = new Konva.Image({
            draggable: true,
        });
        layer.add(KonvoImage);

        var image = new Image();
        image.onload = function () {
            KonvoImage.image(image);
            layer.draw();
        };

        image.src = 'data:image/png;base64,' + data;
    }

    $('#sendCanvasToDivide').click(function () {
        var ImagesData = [];
        var alerts = [];
        var inputsMode = [];
        var IndexOfLastFileInput = -1;

        for (i = 0; i < 3; i++) {
            inputsMode[i] = $('#inputModeSelect' + i + ' option:selected').val();
            if (inputsMode[i] === 'file') {
                IndexOfLastFileInput = i;
            }
        }

        for (i = 0; i < 3; i++) {
            if (inputsMode[i] === 'drawing')
            {
                var canvas = document.querySelector('#DrawingContainer' + i + ' canvas');
                ImagesData[i] = canvas.toDataURL("image/png").replace('data:image/png;base64,', '');
            }
            else if (inputsMode[i] === 'file') {
                var file = document.getElementById('Image' + i + 'Uploader').files[0];

                if (file == null) {
                    if (i == 0 || i == 1) {
                        alerts.push('Nie wybrano pliku udziału #' + i + '.');
                    } else if (i == 2) {
                        alerts.push('Nie wybrano pliku ukrywanego obrazu.');
                    }
                }
                else
                {
                    var reader = new FileReader();
                    reader.readAsDataURL(file);

                    reader.onload = (function(f,index) {
                        return function (e) {
                            ImagesData[index] = e.target.result.split(',')[1];
                            if (index == IndexOfLastFileInput) {
                                sendDataToServer(ImagesData);
                            }
                        };
                    })(file,i);
                }
            }
            else {
                alert("Błąd q.q");
            }
        }
        if (alerts.length > 0) {
            showError(alerts.join('<br>'));
        } else {
            if (IndexOfLastFileInput == -1) {
                sendDataToServer(ImagesData);
            }
        }

    });

    function showError(msg) {
        $('#PanelFinalResult').hide();  
        $('#ErrorPanel').show();
        $('#ErrorPanel').html('<div class="text-center"> ' + msg + '</div>');
    }

    function hideError() {
        $('#ErrorPanel').hide();
    }

    function showLoading() {
        $('#loading').show();
    }

    function hideLoading() {
        $('#loading').hide();
    }

    function onSucces(response) {
        $('#PanelFinalResult').hide();  
        if (response.result === true) {
            var downloadLink = "";
            DisplayLayer.destroyChildren()
            for (var i = 0; i < response.secrets.length; i++) {
                var secret = response.secrets[i];
                LoadImageToLayerFromData(DisplayLayer, secret.value);
                downloadLink = downloadLink + '<div class="glyphicon glyphicon-download-alt" style="font-   ize:30px;"></div><a class="myDownload " href="data:application/octet-stream;charset=utf-16le;base64,' + secret.value + '" download="' + Date.now() + '_sekret_' + (i + 1)+'.png">Sekret ' + (i+1) +'</a>';
            }
            $('#secretsDownload').html(downloadLink);
            $('#PanelFinalResult').show();
        } else {
            $('#PanelFinalResult').hide();
            alert(response.message);
            console.log(response);
        }
    }

    function sendDataToServer(imageData) {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("VisualSteganography", "VisualCryptography")',
            data: JSON.stringify(imageData),
            dataType: 'json',
            contentType: "application/json",
            beforeSend: function () {
                hideError();
                showLoading();
            },
            complete: function () {
                hideLoading();
            },
            success: function (response) {
                onSucces(response);
            },
            error: function (response) {
                console.log(response);
            }
        });
    }
</script>
