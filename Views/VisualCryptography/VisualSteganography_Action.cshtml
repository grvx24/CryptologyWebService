@using CryptoWebService.Helpers;

<div class="row row-eq-height" style="min-height: 200px">
    <div class="col-lg-12" style="display: flex;flex-direction: column;">
        <label for="inputEncrypt">Steganografia wizualna</label>
        <label class="form-control" style="height: 100%" id="MethodDescription">
            Steganografia wizualna polega na zaszyciu informacji ( obrazu ) w dóch osobnych obrazach,
            jest ona na pierwszy rzut oka nie widoczna. Widoczna dopiero staje się po dokładnym nałożeniu dwóch obrazów na siebie.

        </label>
    </div>
</div>
<hr />
<div class="col-lg-6">
    <label>Jawny Obraz #1 </label>
    <div class="row">
        <div class=" col-lg-12">
            <div class="col-lg-4">
                <label for="inputModeSelect">Źródło obrazu</label>
                <select id="inputModeSelect" class="form-control" style="margin-bottom: 20px">
                    <option value="drawing" selected>Rysunek</option>
                    <option value="file">Plik</option>
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class=" col-lg-12">
            <div id="FileUploadPanel" style="display: none">
                @{
                    await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image");
                }
            </div>
            <div id="drawingPanel">
                <div id="DrawingContainer" class="myCanvas">

                </div>
                <div class="text-center mySignature">Pole do rysowania</div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-6">
    <label>Jawny Obraz #2 </label>
    <div class="row">
        <div class=" col-lg-12">
            <div class="col-lg-4">
                <label for="inputModeSelect2">Źródło obrazu</label>
                <select id="inputModeSelect2" class="form-control" style="margin-bottom: 20px">
                    <option value="drawing" selected>Rysunek</option>
                    <option value="file">Plik</option>
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class=" col-lg-12">
            <div id="FileUploadPanel2" style="display: none">
                @{
                    await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image2");
                }
            </div>
            <div id="drawingPanel2">
                <div id="DrawingContainer2" class="myCanvas">

                </div>
                <div class="text-center mySignature">Pole do rysowania</div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-12">
    <hr />
    <hr />
    <hr />
</div>


<div class="row">
    <div class=" col-lg-12">
        <div class="col-lg-4">
            <label for="inputModeSelect3">Źródło obrazu</label>
            <select id="inputModeSelect3" class="form-control" style="margin-bottom: 20px">
                <option value="drawing" selected>Rysunek</option>
                <option value="file">Plik</option>
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class=" col-lg-12">
        <div id="FileUploadPanel3" style="display: none">
            @{
                await Html.RenderPartialAsync(ViewControlsHelper.GetControlPath("UploadControl"), "Image3");
            }
        </div>
        <div id="drawingPanel3">
            <div id="DrawingContainer3" class="myCanvas">

            </div>
            <div class="text-center mySignature">Pole do rysowania</div>
        </div>
    </div>
</div>




<div class="row">
    <div class=" col-lg-12">
        <div class="text-center">
            <button class="btn btn-primary" style="margin-top: 20px" id="sendCanvasToDivide">Podziel na sekrety !</button>

            <div id="loading" class="loader" style="display:none"></div>
        </div>
    </div>
</div>
<hr />
<div id="secretsDownload" class="text-center">

</div>
<div class="row">
    <div class="col-lg-12">
        <div id="Secret">
            <div id="DisplayContainer" class="myCanvas">

            </div>
        </div>
    </div>
</div>


<style>
    label {
        margin-top: 5px;
    }

    .row-eq-height {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
    }

    .myCanvas {
        background-color: #F0F0F0;
        border: 1px solid black;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .mySignature {
        font-style: italic;
        margin-top: 10px;
        margin-bottom: 20px;
    }

    .myDownload {
        margin: 10px;
        font-size: 30px;
        margin-top: 10px;
        margin-bottom: 20px;
    }
</style>

<script>
    var AmountOfSecretsSelect = [];
    AmountOfSecretsSelect["1"] = ["2"];
    AmountOfSecretsSelect["2"] = ["2", "4"];
    AmountOfSecretsSelect["3"] = ["2",];

    var MethodsDescriptions = [];
    MethodsDescriptions["1"] = ["To jest prostokąt"];
    MethodsDescriptions["2"] = ["A to je kwadrato"];
    MethodsDescriptions["3"] = ["Najpierw dwa sekrety a potem w nich ukryty obrazek dodatkowy"];

    var isPaint = false;
    var lastPointerPosition;
    var DisplayLayer = new Konva.Layer();

    $(document).ready(function () {
        $("#MethodSelect").val("1").change();

        InitDrawingKonvoControl('DrawingContainer', 300);
        InitDrawingKonvoControl('DrawingContainer2', 300);
        InitDrawingKonvoControl('DrawingContainer3', 300);

        InitDisplayKonvoControl('DisplayContainer', 600);
    });

    function GetWidth() {
        var width = document.getElementById('Description').offsetWidth;
        if (width === 0) {

            width = document.getElementById('Tools').offsetWidth;
            if (width === 0) {

                width = document.getElementById('Visualization').offsetWidth;
                if (width === 0) {

                    width = 400;
                }
            }
        }
        return width - 28;
    }

    function InitDisplayKonvoControl(stageName, stageHeight)
    {
        var stage = new Konva.Stage({
            container: stageName,
            width: GetWidth(),
            height: stageHeight
        });

        stage.add(DisplayLayer);

        DisplayLayer.on('mouseover', function (evt) {
            var shape = evt.target;
            document.body.style.cursor = 'pointer';
            DisplayLayer.draw();
        });

        DisplayLayer.on('mouseout', function (evt) {
            var shape = evt.target;
            document.body.style.cursor = 'default';
            shape.scaleX(1);
            shape.scaleY(1);
            DisplayLayer.draw();
        });

        var scrollLayers = new Konva.Layer();
        stage.add(scrollLayers);

        const PADDING = 5;

        var verticalBar = new Konva.Rect({
            width: 10,
            height: 100,
            fill: 'grey',
            opacity: 0.8,
            x: stage.width() - PADDING - 10,
            y: PADDING,
            draggable: true,
            dragBoundFunc: function (pos) {
                pos.x = stage.width() - PADDING - 10;
                pos.y = Math.max(Math.min(pos.y, stage.height() - this.height() - PADDING), PADDING);
                return pos;
            }
        });
        scrollLayers.add(verticalBar);
        scrollLayers.draw();

        verticalBar.on('dragmove', function () {
            const availableHeight = stage.height() - PADDING * 2 - verticalBar.height();
            var delta = (verticalBar.y() - PADDING) / availableHeight;

            DisplayLayer.y(-stage.height() * delta);
            DisplayLayer.batchDraw();
        });

        var horizontalBar = new Konva.Rect({
            width: 100,
            height: 10,
            fill: 'grey',
            opacity: 0.8,
            x: PADDING,
            y: stage.height() - PADDING - 10,
            draggable: true,
            dragBoundFunc: function (pos) {
                pos.x = Math.max(Math.min(pos.x, stage.width() - this.width() - PADDING), PADDING);
                pos.y = stage.height() - PADDING - 10;

                return pos;
            }
        });
        scrollLayers.add(horizontalBar);
        scrollLayers.draw();

        horizontalBar.on('dragmove', function () {
            const availableWidth = stage.width() - PADDING * 2 - horizontalBar.width();
            var delta = (horizontalBar.x() - PADDING) / availableWidth;

            DisplayLayer.x(-stage.width() * delta);
            DisplayLayer.batchDraw();
        });
    }

    function InitDrawingKonvoControl(stageName, stageHeight)
    {
        var stage = new Konva.Stage({
            container: stageName,
            width: GetWidth(),
            height: stageHeight,
        });

        var layer = new Konva.Layer();
        stage.add(layer);

        var canvas = document.createElement('canvas');
        canvas.width = stage.width();
        canvas.height = stage.height();

        var image = new Konva.Image({
            image: canvas
        });

        layer.add(image);
        stage.draw();

        var context = canvas.getContext('2d');
        context.strokeStyle = "black";
        context.lineWidth = 5;

        image.on('mousedown touchstart', function () {
            isPaint = true;
            lastPointerPosition = stage.getPointerPosition();
        });

        stage.addEventListener('mouseup touchend', function () {
            isPaint = false;
        });

        stage.addEventListener('mousemove touchmove', function () {
            if (!isPaint) {
                return;
            }
            context.globalCompositeOperation = 'source-over';
            context.strokeStyle = "black";
            context.beginPath();

            var localPos = {
                x: lastPointerPosition.x - image.x(),
                y: lastPointerPosition.y - image.y()
            };
            context.moveTo(localPos.x, localPos.y);
            var pos = stage.getPointerPosition();
            localPos = {
                x: pos.x - image.x(),
                y: pos.y - image.y()
            };
            context.lineTo(localPos.x, localPos.y);
            context.closePath();
            context.stroke();

            lastPointerPosition = pos;
            layer.batchDraw();
        });
    }

    function fillSelect(nValue) {
        var nList = document.getElementById("AmountOfSecretsSelect");

        removeOptions(nList);

        var curr = AmountOfSecretsSelect[nValue];
        for (each in curr)
        {
            var nOption = document.createElement('option');
            nOption.appendChild(document.createTextNode(curr[each]));
            nOption.setAttribute("value",curr[each]);
            nList.appendChild(nOption);
        }

        if (nValue === '3') {
            $('#HidingImageUploadPanel').show();
        } else {
            $('#HidingImageUploadPanel').hide();
        }

        var label = document.getElementById("MethodDescription");
        label.innerHTML = MethodsDescriptions[nValue];
    }

    function LoadImageToLayerFromData(layer, data) {
        var KonvoImage = new Konva.Image({
            draggable: true,
        });
        layer.add(KonvoImage);

        var image = new Image();
        image.onload = function () {
            KonvoImage.image(image);
            layer.draw();
        };

        image.src = 'data:image/png;base64,' + data;
    }

    function removeOptions(selectbox)
    {
        var i;
        for(i = selectbox.options.length - 1 ; i >= 0 ; i--)
        {
            selectbox.remove(i);
        }
    }

    $('#inputModeSelect').on('change', function () {
        if (this.value === 'drawing') {
            $('#FileUploadPanel').hide();
            $('#drawingPanel').show();

        } else if (this.value === 'file') {
            $('#FileUploadPanel').show();
            $('#drawingPanel').hide();
        }
        else {
            Console.log("InputModeSelect value is unknow.")
            //if (this.value === 'text') {
            //    $('#FileUploadPanel').show();
            //    $('#drawingPanel').show();
        }
    });

    $('#sendCanvasToDivide').click(function () {
        var inputMode = $('#inputModeSelect option:selected').val();

        if (inputMode === 'drawing') {
            var canvas = document.querySelector('#DrawingContainer canvas');

            if ($('#MethodSelect option:selected').val() === '3') {
                var hidingImageFile = document.getElementById('HidingImageUploader').files[0]
                if (hidingImageFile == null) {
                    alert('Nie wybrane pliku do ukrycia w podziałach');
                    return;
                }
                var reader2 = new FileReader();
                reader2.readAsDataURL(hidingImageFile);
                reader2.onload = function() {
                    sendDataToServer(canvas.toDataURL("image/png"), reader2.result.split(',')[1]);
                }
            } else {
                sendDataToServer(canvas.toDataURL("image/png"));
            }
        }
        else if (inputMode === 'file') {
            var file = document.getElementById('ImageUploader').files[0];

            if (file == null) {
                alert('Nie wybrano pliku')
                return;
            }

            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function () {
                if ($('#MethodSelect option:selected').val() === '3') {
                    var hidingImageFile = document.getElementById('HidingImageUploader').files[0]
                    if (hidingImageFile == null) {
                        alert('Nie wybrane pliku do ukrycia w podziałach');
                        return;
                    }
                    var reader2 = new FileReader();
                    reader2.readAsDataURL(hidingImageFile);
                    reader2.onload = function() {
                        sendDataToServer(reader.result.split(',')[1], reader2.result.split(',')[1]);
                    }
                } else
                {
                    sendDataToServer(reader.result.split(',')[1]);
                }
            };
        }
    });

    function showLoading() {
        $('#loading').show();
    }

    function hideLoading() {
        $('#loading').hide();
    }

    function onSucces(response) {
        if (response.result === true) {
            var downloadLink = "";
            DisplayLayer.destroyChildren()
            for (var i = 0; i < response.secrets.length; i++) {
                var secret = response.secrets[i];
                LoadImageToLayerFromData(DisplayLayer, secret.value);
                downloadLink = downloadLink + '<div class="glyphicon glyphicon-download-alt" style="font-   ize:30px;"></div><a class="myDownload " href="data:application/octet-stream;charset=utf-16le;base64,' + secret.value + '" download="' + Date.now() + '_sekret_' + (i + 1)+'.png">Sekret ' + (i+1) +'</a>';
            }
            $('#secretsDownload').html(downloadLink);
        } else {
            console.log(response);
        }
    }

    function sendDataToServer(imageData, HidingImageData) {
        var images = [];
        images[0] = imageData.replace('data:image/png;base64,', '');
        if (HidingImageData != null) {
            images[1] = HidingImageData.replace('data:image/png;base64,', '');
        }



        var model = {
            MethodId: $('#MethodSelect').val(),
            AmountOfSecrets: $('#AmountOfSecretsSelect').val(),
            Images: images,
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Secrets", "VisualCryptography")',
            data: JSON.stringify(model),
            dataType: 'json',
            contentType: "application/json",
            beforeSend: function () {
                showLoading();
            },
            complete: function () {
                hideLoading();
            },
            success: function (response) {
                onSucces(response);
            },
            error: function (response) {
                console.log(response);
            }
        });
    }
</script>
