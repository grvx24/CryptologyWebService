<link rel="stylesheet" type="text/css" href="~/css/aes_visualization.css">
<script src="~/lib/custom/d3.min.js"></script>

<div class="row">
    <div class="col-lg-12">
        <h3 class="text-center">
            Wizualizacja została przygotowana dla klucza o długości 128 bitów. 
            Animacja pokazuje działanie rundy wstępnej, rundy cyklicznej oraz przydział klucza dla każdej rundy.
        </h3>
        <br/>
    </div>
</div>

<div class="row">
    <div class="col-lg-4">
        <div class="input-group">
            <label for="inputViz">@Text.VizBlockContent</label>
            <input class="form-control" id="inputViz" type="text" />
        </div>
        <fieldset>
            <input type="radio" name="inputVizFormat" value=0>
            <text>ASCII</text>
            <input type="radio" name="inputVizFormat" value=1 checked>
            <text>Hex</text>
        </fieldset>
    </div>
    <div class="col-lg-4">
        <div class="input-group">
            <label for="inputVizKey">@Text.Key (16 bajtów)</label>
            <input maxlength="32" class="form-control" id="inputVizKey" type="text" />
        </div>
        <fieldset>
            <input type="radio" name="inputVizKeyFormat" value=0>
            <text>ASCII</text>
            <input type="radio" name="inputVizKeyFormat" value=1 checked>
            <text>Hex</text>
        </fieldset>
    </div>
    <div class="col-lg-4">
        <br>     
        <button id="startVizButton" class="btn btn-lg btn-primary">@Text.StartVisualization</button>

    </div>

    </div>
<br/>
<div class="row">
    <div class="text-center">
        <h2>Runda wstępna</h2>
        <br/>
        <h3>
            Wykonanie operacji XOR na bloku danych i kluczu.
        </h3>
    </div>
    <div class="col-lg-4">
        <svg id="rawDataBlock" transform="scale(0.5)">

        </svg>
    </div>
    <div class="col-lg-4">
        <svg id="rawKeyBlock" transform="scale(0.5)">

        </svg>
    </div>
    <div class="col-lg-4" transform="scale(0.5)">
        <svg id="rawResult" transform="scale(0.5)">

        </svg>
    </div>
</div>

<div class="row">
    <div class="text-center">
        <h2>Runda cykliczna (10 powtórzeń dla klucza 128-bitowego)</h2>
        <br/>
    </div>
    <div class="text-center">
        <h3>
            1. Podstawienie
        </h3>
    </div>
    <div class="col-lg-12">
        <svg style="display: block;margin: auto" id="sboxBlock">

        </svg>
    </div>
</div>
<div class="row">
    <div class="col-lg-4">
        <div align="center">
            <svg style="display: block;margin: auto" id="dataBlock" transform="translate(0,0)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4 text-center">
        <div align="center">
            <span style="font-size: 200px" class="glyphicon glyphicon-arrow-right">

            </span>
        </div>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display:block;margin: auto" id="subBytesBlock" transform="translate(0,0)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4 text-left">
        <h4>
            Najedź myszką aby sprawdzić<span class="glyphicon glyphicon-hand-up"></span>
        </h4>   
    </div>
</div>
<div class="row">
    <div class="text-center">
        <h3>
            2. Przesunięcie
        </h3>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display: block;margin: auto" id="shiftBlockBefore" transform="translate(0,0)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4 text-center">
        <div align="center">
            <span style="font-size: 200px" class="glyphicon glyphicon-arrow-right">

            </span>
        </div>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display:block;margin: auto" id="shiftBlockAfter" transform="translate(0,0)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4 text-left">
        <h4>
            Najedź myszką aby sprawdzić<span class="glyphicon glyphicon-hand-up"></span>
        </h4>   
    </div>
</div>

<div class="row">
    <div class="text-center">
        <h3>
            3. Mieszanie kolumn
        </h3>
        <br/>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display:block;margin: auto" id="mixColumnsHelperMatrix" transform="scale(1)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display:block;margin: auto" id="mixColumnsBlockBefore" transform="scale(1)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4">
        <div align="center">
            <svg style="display:block;margin: auto" id="mixColumnsBlockAfter" transform="scale(1)">

            </svg>
        </div>
    </div>
    <div class="col-lg-4 col-lg-offset-8 text-left">
        <h4>
            Najedź myszką aby sprawdzić<span class="glyphicon glyphicon-hand-up"></span>
        </h4>   
    </div>

</div>
<div class="row">
    <div class="col-lg-12">

    </div>
</div>









<script>

    var sBox = new Array(16);

    sBox[0] = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76];
    sBox[1] = [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0];
    sBox[2] = [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15];
    sBox[3] = [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75];
    sBox[4] = [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84];
    sBox[5] = [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf];
    sBox[6] = [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8];
    sBox[7] = [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2];
    sBox[8] = [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73];
    sBox[9] = [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb];
    sBox[10] = [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79];
    sBox[11] = [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08];
    sBox[12] = [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a];
    sBox[13] = [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e];
    sBox[14] = [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf];
    sBox[15] = [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];

    var mixColumnsBox = new Array(4);
    mixColumnsBox[0]=[0x02,0x03,0x01,0x01];
    mixColumnsBox[1]=[0x01,0x02,0x03,0x01];
    mixColumnsBox[2]=[0x01,0x01,0x02,0x03];
    mixColumnsBox[3]=[0x03,0x01,0x01,0x02];



    var numrows = 4;
    var numcols = 4;

    var matrix = new Array(numrows);
    for (var i = 0; i < numrows; i++) {
        matrix[i] = new Array(numcols);
        for (var j = 0; j < numcols; j++) {
            matrix[i][j] = Math.floor(Math.random() * 256);
        }
    }

    var subBytesMatrix = SubBytes(matrix, sBox);
    var shiftRowsMatrix = ShiftRows(subBytesMatrix);
    var mixColumnsMatrix = MixColumns(shiftRowsMatrix);

    VisualizeDataBlock(matrix, 'dataBlock', 'cell-rect-data');
    VisualizeSBox(sBox);
    VisualizeDataBlock(subBytesMatrix, 'subBytesBlock', 'cell-rect-result');

    VisualizeDataBlock(subBytesMatrix, 'shiftBlockBefore', 'cell-rect-data-nohover');
    VisualizeDataBlock(shiftRowsMatrix, 'shiftBlockAfter', 'cell-rect-result');

    VisualizeDataBlock(shiftRowsMatrix, 'mixColumnsBlockBefore', 'cell-rect-data-nohover');
    VisualizeDataBlock(mixColumnsBox, 'mixColumnsHelperMatrix', 'cell-rect-helpers');
    VisualizeDataBlock(mixColumnsMatrix, 'mixColumnsBlockAfter', 'cell-rect-result');


    SetMouseEventOnDataBlock();
    SetMouseEventOnShiftBlock();
    SetMouseEventOnMixColumns();


    function IntToHexString(d) {
        var result = d.toString(16).toUpperCase();
        return result.length < 2 ? "0" + result : result;
    }


    function VisualizeSBox(matrix) {

        var numrows = 16;
        var numcols = 16;

        var margin = { top: 100, right: 100, bottom: 100, left: 100 },
            width = 400,
            height = 400;

        var textOffsetX = (width / numcols) / 2;
        var textOffsetY = (height / numrows) / 2;

        var svg = d3.select("#sboxBlock")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        var x = d3.scale.ordinal()
            .domain(d3.range(numcols))
            .rangeBands([0, width]);

        var y = d3.scale.ordinal()
            .domain(d3.range(numrows))
            .rangeBands([0, height]);


        var row = svg.selectAll(".row")
            .data(matrix)
            .enter().append("g")
            .attr("class", "row")
            .attr("id", function (d, i) {
                return "row" + i;
            })
            .attr("transform", function (d, i) { return "translate(0," + y(i) + ")"; });

        row.selectAll(".cell")
            .data(function (d) { return d; })
            .enter().append("g")
            .attr("id", function (d, i) { return "cell" + i })
            .attr("class", "cell")
            .append("rect")
            .attr("class", "cell-rect-sbox")
            .attr("x", function (d, i) { return x(i); })
            .attr("width", x.rangeBand())
            .attr("height", y.rangeBand());

        row.selectAll(".cell").append("text")
            .attr("class", "cell-text-sbox")
            .attr("x", function (d, i) { return x(i) + textOffsetX; })
            .attr("y", textOffsetY)
            .text(function (d) {
                return IntToHexString(d);
            });


        //index row

        var indexRowArray = new Array(16);
        for (var i = 0; i < 16; i++) {
            indexRowArray[i] = i;
        }

        var indexRow = d3.select("#sboxBlock")
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top / 2 + ")");

        indexRow.selectAll(".index-row")
            .data(indexRowArray)
            .enter().append("g")
            .attr("class", "index-cell-row")
            .append("rect")
            .attr("class", "cell-rect-index")
            .attr("x", function (d, i) { return x(i); })
            .attr("width", x.rangeBand())
            .attr("height", y.rangeBand());


        indexRow.selectAll("g")
            .append("text")
            .attr("class", "cell-text-sbox")
            .attr("x", function (d, i) { return x(i) + textOffsetX; })
            .attr("y", textOffsetY)
            .text(function (d) {
                return IntToHexString(d);
            });

        //index column

        var indexColumn = d3.select("#sboxBlock")
            .append("g")
            .attr("transform", "translate(" + margin.left / 2 + "," + margin.top + ")");

        indexColumn.selectAll(".index-column")
            .data(indexRowArray)
            .enter().append("g")
            .attr("class", "index-cell-column")
            .append("rect")
            .attr("class", "cell-rect-index")
            .attr("y", function (d, i) { return y(i); })
            .attr("width", x.rangeBand())
            .attr("height", y.rangeBand());

        indexColumn.selectAll("g")
            .append("text")
            .attr("class", "cell-text-sbox")
            .attr("y", function (d, i) { return x(i) + textOffsetX; })
            .attr("x", textOffsetY)
            .text(function (d) {
                return IntToHexString(d);
            });
    }

    function VisualizeDataBlock(matrix, svgId, cellRectClass) {
        var numrows = 4;
        var numcols = 4;

        var margin = { top: 0, right: 0, bottom: 0, left: 0 },
            width = 250,
            height = 250;

        var textOffsetX = (width / numcols) / 2;
        var textOffsetY = (height / numrows) / 2;

        var svg = d3.select("#" + svgId)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .style("margin-left", -margin.left + "px")
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scale.ordinal()
            .domain(d3.range(numcols))
            .rangeBands([0, width]);

        var y = d3.scale.ordinal()
            .domain(d3.range(numrows))
            .rangeBands([0, height]);

        var row = svg.selectAll(".row")
            .data(matrix)
            .enter().append("g")
            .attr("class", "row")
            .attr("transform", function (d, i) { return "translate(0," + y(i) + ")"; });

        row.selectAll(".cell")
            .data(function (d) { return d; })
            .enter().append("g")
            .attr("class", "cell")
            .append("rect")
            .attr("class", cellRectClass)
            .attr("x", function (d, i) { return x(i); })
            .attr("width", x.rangeBand())
            .attr("height", y.rangeBand());


        row.selectAll(".cell").append("text")
            .attr("class", "cell-text-data")
            .attr("x", function (d, i) { return x(i) + textOffsetX; })
            .attr("y", textOffsetY)
            .text(function (d) {
                return IntToHexString(d);
            });
    }

    function handleMouseOverOnDataBlock(d, i) {

        var row = d >> 4;
        var column = d & 15;

        d3.select("#row" + row).select("#cell" + column)
            .select("rect")
            .attr("class", "cell-rect-selected");

        d3.selectAll(".index-cell-column")
            .filter(function (d, i) {
                return i === row;
            })
            .select("rect")
            .attr("class", "cell-rect-selected-2");

        d3.selectAll(".index-cell-row")
            .filter(function (d, i) {
                return i === column;
            })
            .select("rect")
            .attr("class", "cell-rect-selected-2");

        d3.select("#subBytesBlock").selectAll(".cell")
            .filter(function (d, index) {
                return index === i;
            }).select("rect")
            .attr("class", "cell-rect-selected");

    }

    function handleMouseOutOnDataBlock(d, i) {

        var row = d >> 4;
        var column = d & 15;

        d3.select("#row" + row).select("#cell" + column)
            .select("rect")
            .attr("class", "cell-rect-sbox");

        d3.selectAll(".index-cell-column")
            .filter(function (d, i) {
                return i === row;
            })
            .select("rect")
            .attr("class", "cell-rect-index");

        d3.selectAll(".index-cell-row")
            .filter(function (d, i) {
                return i === column;
            })
            .select("rect")
            .attr("class", "cell-rect-index");

        d3.select("#subBytesBlock").selectAll(".cell")
            .filter(function (d, index) {
                return index === i;
            }).select("rect")
            .attr("class", "cell-rect-result");
    }

    function SetMouseEventOnDataBlock(d,i) {

        d3.select('#dataBlock')
            .selectAll('.cell')
            .on('mouseover', handleMouseOverOnDataBlock)
            .on('mouseout', handleMouseOutOnDataBlock);
    }

    function handleMouseOverOnShiftBlock(d,i) {

        if (i < 4) {
            d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index < 4;
                })
                .select('rect')
                .attr("class", "cell-rect-selected-2");

            d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index < 4;
                })
                .select('rect')
                .attr("class", "cell-rect-selected-2");
        }
        else if (i >= 4 && i < 8) {

            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 4 && index < 8;
                });


            cellsBefore.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 0) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 4 && index < 8;
                });

            cellsAfter.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 3) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });
        } else if (i >= 8 && i < 12) {
            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 8 && index < 12;
                });


            cellsBefore.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 0 || index == 1) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 8 && index < 12;
                });

            cellsAfter.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 3 || index == 2) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });
        } else if (i >= 12 && i < 16) {
            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 12 && index < 16;
                });


            cellsBefore.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 0 || index == 1||index==2) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 12 && index < 16;
                });

            cellsAfter.select('rect')
                .attr("class", function (d, index) {
                    //local index, so value starts from 0
                    if (index == 3 || index == 2||index===1) {
                        return "cell-rect-selected";
                    } else {
                        return "cell-rect-selected-2";
                    }
                });
        }
    }

    function handleMouseOutOnShiftBlock(d,i) {

        if (i < 4) {
            d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index < 4;
                })
                .select('rect')
                .attr("class", "cell-rect-data-nohover");

            d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index < 4;
                })
                .select('rect')
                .attr("class", "cell-rect-result");
        }
        else if (i >= 4 && i < 8) {

            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 4 && index < 8;
                });

            cellsBefore.select('rect')
                .attr("class", "cell-rect-data-nohover");

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 4 && index < 8;
                });

            cellsAfter.select('rect')
                .attr("class", "cell-rect-result");
        }
        else if (i >= 8 && i < 12) {
            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 8 && index < 12;
                });

            cellsBefore.select('rect')
                .attr("class", "cell-rect-data-nohover");

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 8 && index < 12;
                });

            cellsAfter.select('rect')
                .attr("class", "cell-rect-result");
        }
        else if (i >= 12 && i < 16) {
            var cellsBefore = d3.select('#shiftBlockBefore')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 12 && index < 16;
                });

            cellsBefore.select('rect')
                .attr("class", "cell-rect-data-nohover");

            var cellsAfter = d3.select('#shiftBlockAfter')
                .selectAll('.cell')
                .filter(function (d, index) {
                    return index >= 12 && index < 16;
                });
            cellsAfter.select('rect')
                .attr("class", "cell-rect-result");
        }
    }

    function SetMouseEventOnShiftBlock() {
        d3.select('#shiftBlockBefore')
            .selectAll('.cell')
            .on('mouseover', handleMouseOverOnShiftBlock)
            .on('mouseout', handleMouseOutOnShiftBlock);
    }


    function handleMouseOverOnMixColumns(d, i) {
        d3.select(this).select("rect")
            .attr("class", "cell-rect-selected");

        var cellsBefore = d3.select('#mixColumnsBlockBefore')
            .selectAll(".cell")
            .filter(function (d, index) {
                var imod = i % 4;
                return (index % 4) == imod;
            });

        cellsBefore.select("rect")
            .attr("class", function(d, index) {
                switch (index) {
                    case 0: { return "maroon-cell";}
                    case 1: { return "red-cell";}
                    case 2: { return "orange-cell";}
                    case 3: { return "yellow-cell";}

                }
            });

        var helperMatrix = d3.select('#mixColumnsHelperMatrix')
            .selectAll(".cell")
            .filter(function (d, index) {

                var row = Math.floor(i / 4);
                console.log(row);
                return index >= row * 4 && index < row * 4 + 4;
            });

        helperMatrix.select("rect")
            .attr("class", function (d, index) {
                switch (index) {
                case 0: { return "maroon-cell";}
                case 1: { return "red-cell";}
                case 2: { return "orange-cell";}
                case 3: { return "yellow-cell";}
                }
            });

    }
    function handleMouseOutOnMixColumns(d, i) {
        d3.select(this).select("rect")
            .attr("class", "cell-rect-result");

        var cellsBefore = d3.select('#mixColumnsBlockBefore')
            .selectAll(".cell")
            .filter(function (d, index) {
                var imod = i % 4;
                return index % 4 == imod;
            });

        cellsBefore.select("rect")
            .attr("class", "cell-rect-data-nohover");

        var helperMatrix = d3.select('#mixColumnsHelperMatrix')
            .selectAll(".cell")
            .filter(function (d, index) {

                var row = Math.floor(i / 4);
                console.log(row);
                return index >= row * 4 && index < row * 4 + 4;
            });

        helperMatrix.select("rect")
            .attr("class", "cell-rect-helpers");

    }
    function SetMouseEventOnMixColumns() {
        d3.select('#mixColumnsBlockAfter')
            .selectAll('.cell')
            .on('mouseover', handleMouseOverOnMixColumns)
            .on('mouseout', handleMouseOutOnMixColumns);
    }


    function ChangeTextData(matrix, numrows, numcols, textClass) {

        d3.selectAll("." + textClass)
            .each(function (d, i) {
                d3.select(this).text(function () {

                    let x = i % numrows;
                    let y = Math.floor(i / numcols);

                    return matrix[x][y];
                })
            });
    }


    //backend
    function SubBytes(block, sbox) {
        let numrows = 4;
        let numcols = 4;

        let resultBlock = new Array(numrows);
        for (let i = 0; i < numrows; i++) {
            resultBlock[i] = new Array(numcols);
        }

        for (let i = 0; i < numrows; i++) {

            for (let j = 0; j < numcols; j++) {

                var row = block[i][j] >> 4;
                var column = block[i][j] & 15;

                resultBlock[i][j] = sbox[row][column];
            }
        }

        return resultBlock;
    }

    function GMul(a, b) {
        let p = 0;


        for (let counter = 0; counter < 8; counter++) {
            if ((b & 1) != 0) {
                p ^= a;
            }


            let hi_bit_set = (a & 0x80) != 0;
            a <<= 1;
            if (hi_bit_set) {
                a ^= 0x1B; /* x^8 + x^4 + x^3 + x + 1 */
            }
            b >>= 1;
        }
        
        return p&255;
    }

    function MixColumns(s) {

        var block = new Array(4);
        for (var i = 0; i < 4; i++) {
            block[i] = new Array(4);
        }
        for (let c = 0; c < 4; c++) {
            block[0][c] = (GMul(0x02, s[0][c]) ^ GMul(0x03, s[1][c]) ^ s[2][c] ^ s[3][c]);
            block[1][c] = (s[0][c] ^ GMul(0x02, s[1][c]) ^ GMul(0x03, s[2][c]) ^ s[3][c]);
            block[2][c] = (s[0][c] ^ s[1][c] ^ GMul(0x02, s[2][c]) ^ GMul(0x03, s[3][c]));
            block[3][c] = (GMul(0x03, s[0][c]) ^ s[1][c] ^ s[2][c] ^ GMul(0x02, s[3][c]));

        }


        return block;

    }

    function ShiftRows(matrix) {

        let numrows = 4;
        let numcols = 4;

        var block = new Array(numrows);
        for (var i = 0; i < numrows; i++) {
            block[i] = new Array(numcols);
        }

        for (var i = 0; i < numrows; i++) {
            for (var j = 0; j < numcols; j++) {
                block[i][j] = matrix[i][j];
            }
        }


        let temp1_1 = block[1][0];
        for (var i = 0; i < numcols - 1; i++) {
            block[1][i] = block[1][i + 1];
        }
        block[1][3] = temp1_1;

        let temp2_1 = block[2][0];
        let temp2_2 = block[2][1];

        for (var i = 0; i < numcols - 2; i++) {
            block[2][i] = block[2][i + 2];
        }
        block[2][2] = temp2_1;
        block[2][3] = temp2_2;

        temp3 = block[3][3];

        for (var i = numcols - 1; i >= 1; i--) {
            block[3][i] = block[3][i - 1];
        }

        block[3][0] = temp3;

        return block;
    }

    function AddRoundKey(matrix,key) {

        var result = new Array(4);
        for (var i = 0; i < 4; i++) {
            result = new Array(4);
        }

        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                result[i][j] = matrix[i][j] ^ key[i][j];
            }
        }

        return result;
    }

    function KeySchedule_Rotation(oldKey) {
        var newKey = new Array(4);
        for (var i = 0; i < 4; i++) {
            newKey[i] = new Array(4);
        }

        //rotation
        var tempColumn = new Array(4);
        tempColumn[0] = oldKey[0][3];

        for (var i = 1; i < 4; i++) {
            tempColumn[i] = oldKey[i][3];
        }

        //subbytes
        for (var i = 0; i < 4; i++) {
            var row = tempColumn[i] >> 4;
            var column = tempColumn[i] & 15;

            tempColumn[i] = sBox[row][column];
        }

        console.log(tempColumn);
    }
    





</script>
