@model CryptoWebService.Models.Quiz.ViewModel.QuizViewModel

@{
    ViewData["Title"] = "quiz";
}

<div class="container">
    <input hidden id="quizId" value="@Model.QuizId" />
    <input hidden id="amountOfQuestions" value="@Model.AmountOfQuestions" />
    
    <label class="col-lg-12 text-center" style="font-size:20px; color:#1c5aa6;">
        @Model.QuizName
    </label>

    @{
        for (int i = 0; i < Model.Questions.Count(); i++)
        {
            Model.Questions[i].Number = i + 1;
            await Html.RenderPartialAsync("Question", Model.Questions[i]);
        }
    }
    <div class="col-lg-12 text-center" id="ResultPanel" style="display:none" >
        <svg viewBox="0 0 36 36" class="circular-chart blue">
            <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
            <path id="CircleId" class="circle"
                  stroke-dasharray="0, 100"
                  d="M18 2.0845  a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />

            <text x="18" y="20.35" class="percentage" id="ResultPercentage">0%</text>
        </svg>
    </div>
    <div class="text-center alert col-lg-12 alert-danger" role="alert" id="alertPanel" style="display:none; margin-top:20px;">
    </div>
    <div class="col-lg-12 text-center">
        <div id="loading" class="loader" style="display:none;"></div>
        <input style="cursor:pointer;" type="button" class="btn btn-block CheckButton" value="Sprawdź !" onclick="CheckQuiz()">
    </div>

</div>

<script>
    function TakeQuestionAnswers(questionNumber) {
        questionNumber = questionNumber + 1;
        var allAnswersOnQuestion = $('[id^=question_' + questionNumber + '_]');
        var _selectedAnswersId = [];

        var i;
        for (i = 0; i < allAnswersOnQuestion.length; i++) {
            var isChecked = allAnswersOnQuestion[i].checked;
            if (isChecked) {
                _selectedAnswersId.push(allAnswersOnQuestion[i].id.split("_")[5]);
            }   
        }

        if (_selectedAnswersId.length == 0) {
            return undefined ;
        } else {
            return {
                QuestionId: allAnswersOnQuestion[0].id.split("_")[3],
                SelectedAnswersId: _selectedAnswersId
            };
        }
    }

    function TakeAnswersOnQuestion() {
        var amountOfQuestionsInQuiz = parseInt(document.getElementById("amountOfQuestions").getAttribute("value"));

        var questionAnswers = [];
        var i;
        for (i = 0; i < amountOfQuestionsInQuiz; i++) {
            var x = TakeQuestionAnswers(i);
            if (typeof x !== 'undefined') {
                questionAnswers.push(x);
            }  
        }

        var UserAnswersDto = {
            QuestionAnswers: questionAnswers,
            QuizId: document.getElementById("quizId").getAttribute("value")
        }

        return UserAnswersDto;
    }

    function CheckQuiz() {

        var UserAnswersDto = TakeAnswersOnQuestion();

        if (UserAnswersDto.QuestionAnswers.length > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Checkquiz")',
                data: JSON.stringify(UserAnswersDto),
                dataType: 'json',
                contentType: "application/json",
                beforeSend: function () {
                    hideAlert()
                    hideResult();
                    showLoading();
                },
                complete: function () {
                    hideLoading();
                },
                success: function (response) {
                    if (response.result == true) {
                        onSucces(response);
                    } else {
                        onError(response);
                    }
                },
                error: function (response) {
                    onError("AJAX ERROR" + response);
                }
            });
        } else {
            showAlert("Nie zaznaczono żadnej odpowiedzi")
        }    
    }

    function showAlert(msg) {
        hideResult();
        $('#alertPanel').show();
        $('#alertPanel').text(msg);
    }

    function hideAlert() {
        $('#alertPanel').hide();
    }

    function onSucces(response) {
        showResult(response.score);
    }
    function onError(response) {
        console.log(response);
    }
    function hideResult() {
        $('#ResultPanel').hide();
    }

    function showResult(result) {
        $('#ResultPanel').show();
        $('#CircleId').addClass('circleAnimation');
        document.getElementById("CircleId").setAttribute("stroke-dasharray", result + ",100");
        $('#ResultPercentage').text(result + "%");
    }

    function showLoading() {
        $('#loading').show();
    }

    function hideLoading() {
        $('#loading').hide();
    }
</script>

<style>
    .flex-wrapper {
        display: flex;
        flex-flow: row nowrap;
    }

    .single-chart {
        width: 33%;
        justify-content: space-around ;
    }

    .circular-chart {
        display: block;
        margin: 10px auto;
        max-width: 80%;
        max-height: 250px;
    }

    .circle-bg {
        fill: none;
        stroke: #eee;
        stroke-width: 3.8;
    }

    .circle {
        fill: none;
        stroke-width: 2.8;
        stroke-linecap: round;    
    }

    .circleAnimation {
        animation: progress 2s ease-out forwards;
    }

    @@keyframes progress {
        0% {
        stroke-dasharray: 0 1000;
        }
    }

    .circular-chart.blue .circle{
        stroke: #1c5aa6;
    }

    .percentage {
        fill: #666;
        font-family: sans-serif;
        font-size: 0.5em;
        text-anchor: middle;
    }
    /*<--*/

    .MyHand{
        font-size:24px;
    }
    .CheckButton {
        margin-top: 20px;
        background: #f5f25c;
        font-size: 24px;
        border: 2px solid rgba(68, 68, 68, 0.76);
    }

    .questionContent {
        font-size: 18px;
        margin-top: 20px;
    }

    .question {
        background-color: rgba(170, 170, 170, 0.10);
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border: 2px solid rgba(68, 68, 68, 0.76);
        -moz-box-shadow: 0 0 2px 2px #f4f4f4;
        -webkit-box-shadow: 0 0 2px 2px #f4f4f4;
        box-shadow: 0 0 4px 4px #f4f4f4;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .LabelAnswer {
        width: 100%;
        height: 100%;
        font-size: 16px;
        margin: 5px;
        cursor: pointer;
        text-align: center;
        background-color: #73aef8;
        width: 420px;
        padding: 10px;
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border: 2px solid rgba(68, 68, 68, 0.76);
        color: #000;
        -moz-box-shadow: 0 0 2px 2px #f4f4f4;
        -webkit-box-shadow: 0 0 2px 2px #f4f4f4;
        box-shadow: 0 0 4px 4px #f4f4f4;
        color: white;
    }

    .Answer label {
        background: #1c5aa6;
    }

    .Answer input[type=checkbox] {
        visibility: hidden;
    }

    .Answer input[type=checkbox]:checked + label {
        background: #dc640c;
    }

</style>
