@model CryptoWebService.Models.Quiz.ViewModel.QuizViewModel

@{
    ViewData["Title"] = "quiz";
}

<div class="container">

    <label>
        @Model.QuizName
    </label>

    @{
        for (int i = 0; i < Model.Questions.Count(); i++)
        {
            await Html.RenderPartialAsync("Question", Model.Questions[i]);
        }
    }
    <div class="col-lg-12 text-center" id="ResultPanel">
        <svg viewBox="0 0 36 36" class="circular-chart blue">
            <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
            <path id="CircleId" class="circle"
                  stroke-dasharray="0, 100"
                  d="M18 2.0845  a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />

            <text x="18" y="20.35" class="percentage" id="ResultPercentage">0%</text>
        </svg>
    </div>
    <div class="col-lg-12 text-center">
        <div id="loading" class="loader" style="display:none;"></div>
        <input style="cursor:pointer;" type="button" class="btn btn-block CheckButton" value="Sprawdź !" onclick="CheckQuiz()">
    </div>

</div>

<script>
    function CheckQuiz() {
        var ResultValue = 56;
        $('#CircleId').addClass('circleAnimation');
        document.getElementById("CircleId").setAttribute("stroke-dasharray", ResultValue + ",100");
        $('#ResultPercentage').text(ResultValue+"%");

        showLoading();
    }

    function showLoading() {
        $('#loading').show();
    }

    function hideLoading() {
        $('#loading').hide();
    }
</script>

<style>
    .flex-wrapper {
        display: flex;
        flex-flow: row nowrap;
    }

    .single-chart {
        width: 33%;
        justify-content: space-around ;
    }

    .circular-chart {
        display: block;
        margin: 10px auto;
        max-width: 80%;
        max-height: 250px;
    }

    .circle-bg {
        fill: none;
        stroke: #eee;
        stroke-width: 3.8;
    }

    .circle {
        fill: none;
        stroke-width: 2.8;
        stroke-linecap: round;    
    }

    .circleAnimation {
        animation: progress 1s ease-out forwards;
    }

    @@keyframes progress {
        0% {
        stroke-dasharray: 0 1000;
        }
    }

    .circular-chart.blue .circle{
        stroke: #1c5aa6;
    }

    .percentage {
        fill: #666;
        font-family: sans-serif;
        font-size: 0.5em;
        text-anchor: middle;
    }
    /*<--*/

    .MyHand{
        font-size:24px;
    }
    .CheckButton {
        margin-top: 20px;
        background: #f5f25c;
        font-size: 24px;
        border: 2px solid rgba(68, 68, 68, 0.76);
    }

    .questionContent {
        font-size: 18px;
        margin-top: 20px;
    }

    .question {
        background-color: rgba(170, 170, 170, 0.10);
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border: 2px solid rgba(68, 68, 68, 0.76);
        -moz-box-shadow: 0 0 2px 2px #f4f4f4;
        -webkit-box-shadow: 0 0 2px 2px #f4f4f4;
        box-shadow: 0 0 4px 4px #f4f4f4;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .LabelAnswer {
        width: 100%;
        height: 100%;
        font-size: 16px;
        margin: 5px;
        cursor: pointer;
        text-align: center;
        background-color: #73aef8;
        width: 420px;
        padding: 10px;
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border: 2px solid rgba(68, 68, 68, 0.76);
        color: #000;
        -moz-box-shadow: 0 0 2px 2px #f4f4f4;
        -webkit-box-shadow: 0 0 2px 2px #f4f4f4;
        box-shadow: 0 0 4px 4px #f4f4f4;
        color: white;
    }

    .Answer label {
        background: #1c5aa6;
    }

    .Answer input[type=checkbox] {
        visibility: hidden;
    }

    .Answer input[type=checkbox]:checked + label {
        background: #dc640c;
    }

</style>
