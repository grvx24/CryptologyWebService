<script src="~/lib/custom/d3.min.js"></script>

<div class="row">
    <div class="col-lg-12">
        <h1 class="text-center">
            LFSR - wizualizacja
        </h1>
        <br />
    </div>
</div>
<div class="row">
    <svg width="1000" height="400" id="lfsrSvg">

    </svg>
</div>
<div class="row">
    <h2 id="output"></h2>
    <button id="nextStepBtn" class="btn btn-primary" onclick="update()">Wygeneruj bit</button>
</div>


<script>

    var data = [1, 1, 0, 0, 1, 0, 1, 0];
    var functions = [1, 2, 3, 5, 6, 8];

    var xorBits = [];

    var lastIndex = data.length - 1;

    var maxWidth = 800;
    var maxHeight = 100;

    var width = maxWidth / data.length;

    var textX = width;
    var textY = maxHeight * 1.5;

    var svg = d3.select('#lfsrSvg');


    var groups = svg.selectAll("g")
        .data(data)
        .enter()
        .append("g")
        .attr("class", ".cell")
        .attr("id",
            function(d, i) {
                return 'cell' + i;
            })
        .attr("transform", "translate(100,0)");

    var rects = groups.append("rect")
        .attr("x",
            function(d, i) {
                return i * width;
            })
        .attr("y", 100)
        .attr("width", width)
        .attr("height", maxHeight)
        .attr("class", "register-rect");


    svg.append("line")
        .attr("x1", maxWidth + 100)
        .attr("y1", 150)
        .attr("x2", maxWidth + 200)
        .attr("y2", 150)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    svg.append("line")
        .attr("x1", maxWidth + 160)
        .attr("y1", 150)
        .attr("x2", maxWidth + 160)
        .attr("y2", 300)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    svg.append("line")
        .attr("x1", maxWidth + 160)
        .attr("y1", 300)
        .attr("x2", 40)
        .attr("y2", 300)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    svg.append("line")
        .attr("x1", 40)
        .attr("y1", 300)
        .attr("x2", 40)
        .attr("y2", 150)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    svg.append("line")
        .attr("x1", 40)
        .attr("y1", 150)
        .attr("x2", 100)
        .attr("y2", 150)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    var text = groups.append("text")
        .text(function(d) { return d; })
        .attr("x",
            function(d, i) {
                return i * textX + width / 2;
            })
        .attr("y", textY)
        .attr("class", "register-cell-text");


    var lastItem = groups
        .filter(function(d, i) {
            return i === lastIndex;
        });

    var cellsForLines = groups.filter(function(d, i) {
        return functions.includes((i + 1));
    });

    cellsForLines.each(function(d) {
        xorBits.push(d);
    });


    cellsForLines.selectAll("line")
        .data(functions)
        .enter()
        .append("line")
        .attr("x1",
            function(d, i) {
                return (d - 1) * width + 50;
            })
        .attr("y1", 200)
        .attr("x2",
            function(d, i) {
                return (d - 1) * width + 50;
            })
        .attr("y2", 300)
        .attr("stroke-width", 4)
        .attr("stroke", "black");

    var outputArray = [];

    var feedbackText=svg.append('text')
        .attr('id', 'feedbackFunction')
        .attr('x', 100)
        .attr('y', 350)
        .text(function () {
            var s = '';
            var result = 0;
            for (var i = 0; i < xorBits.length; i++) {
                result ^= xorBits[i];
            }
            for (var i = 0; i < xorBits.length-1; i++) {
                s += xorBits[i] + '+';
            }
            var txt = result.toString() + '\t<===\t' + s + xorBits[xorBits.length - 1];
            return txt;
        })
        .attr("class", "register-cell-text");


    svg.append('text')
        .attr('id', 'outputBits')
        .attr('x', 100)
        .attr('y', 400)
        .text(outputArray)
        .attr("class", "register-cell-text");



    function update() {

        $('#nextStepBtn').attr("disabled", true);

        lastItem.select("text").transition().duration(500)
            .attr("y", 400)
            .attr("x", 0);

        var newBit = 0;
        for (var i = 0; i < xorBits.length; i++) {
            newBit ^= xorBits[i];
        }

        var output = data.pop();
        data.unshift(newBit);

        outputArray.unshift(output);
        if (outputArray.length > 40) {
            outputArray.pop();
        }



        xorBits =[]
        cellsForLines.each(function(d) {
            xorBits.push(d);
        });

        var groups = svg.selectAll("g").data(data);

        var outputBits = svg.select('#outputBits');

        groups.select("text")
            .transition()
            .delay(1000)
            .duration(0)
            .text(function(d) { return d; })
            .attr("x",
            function (d, i) {
                $('#nextStepBtn').attr("disabled", false);

                outputBits.text(function () {
                    return outputArray;
                });

                changeFeedbackText(newBit);

                    return i * textX + width / 2;
                })
            .attr("y", textY);

    }                

    function changeFeedbackText(newBit) {
        feedbackText
            .text(function () {
                var s = '';

                for (var i = 0; i < xorBits.length - 1; i++) {
                    s += xorBits[i] + '+';
                }
                var txt = newBit.toString() + '\t<===\t' + s + xorBits[xorBits.length - 1];
                return txt;
            })
    }

</script>