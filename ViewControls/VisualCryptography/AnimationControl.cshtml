

<div id="Animation@(Model.UnicNumber)"
        class="myCanvas"
        style="
        width:@(Model.TotalWidthWithBorders + "px" );
        height:@(Model.TotalHeightWithBorders + "px")" />
</div>


<style>
    .myCanvas {
        background-color: #F0F0F0;
        border: 2px solid black;
    }
</style>

<script>
    var width = parseInt('@Model.Width');
    var period = parseInt('@Model.Period');
    var height = parseInt('@Model.Height') ;
    var amplitude = parseInt('@Model.Amplitude');
    var totalWidth = parseInt('@Model.TotalWidth');

    var mainLayer = new Konva.Layer();

    var StaticKonvaImage = InitImage('@Model.StaticImage', mainLayer, amplitude);
    var AnimationKonvaImage@(Model.UnicNumber) = InitImage('@Model.MovingImage', mainLayer);

    mainLayer.add(StaticKonvaImage);
    mainLayer.add(AnimationKonvaImage@(Model.UnicNumber));

    var stage = new Konva.Stage({
        container: 'Animation@(Model.UnicNumber)',
        width: totalWidth,
        height: height
    });

    stage.add(mainLayer);

    var counter@(Model.UnicNumber) = 0;
    var IsWaiting@(Model.UnicNumber) = false;
    var canWait@(Model.UnicNumber) = true;
    var GoRight@(Model.UnicNumber) = true;
    AnimationKonvaImage@(Model.UnicNumber).setX(0);
    var Waiting@(Model.UnicNumber) = 0;
    var anim@(Model.UnicNumber) = new Konva.Animation(function (frame) {

        if (IsWaiting@(Model.UnicNumber)) {
            if (Waiting@(Model.UnicNumber) == 0) {              
                IsWaiting@(Model.UnicNumber) = false;
            } else {
                Waiting@(Model.UnicNumber) = Waiting@(Model.UnicNumber) - 1;
            }
        } else {
            if (counter@(Model.UnicNumber) == @(Model.Amplitude) && canWait@(Model.UnicNumber)) {
                IsWaiting@(Model.UnicNumber) = true;
                Waiting@(Model.UnicNumber) = @(Model.Amplitude);
                canWait@(Model.UnicNumber) = false;
            } else {
                canWait@(Model.UnicNumber) = true;
                if (GoRight@(Model.UnicNumber)) {
                    if (counter@(Model.UnicNumber) < @(Model.Amplitude * 2)) {
                        counter@(Model.UnicNumber) = counter@(Model.UnicNumber) + 1;
                        AnimationKonvaImage@(Model.UnicNumber).setX(counter@(Model.UnicNumber));               
                    } else {
                        GoRight@(Model.UnicNumber) = false;
                    }
                } else {
                    if (counter@(Model.UnicNumber) > 0) {
                        counter@(Model.UnicNumber) = counter@(Model.UnicNumber) - 1;
                        AnimationKonvaImage@(Model.UnicNumber).setX(counter@(Model.UnicNumber));          
                    } else {
                        GoRight@(Model.UnicNumber) = true;
                    }
                }
            }
        }
    }, mainLayer);

    anim@(Model.UnicNumber).start();

    function InitImage(imageSrc, layer,XPosition) {
        var KonvaImage = new Konva.Image({
            x: XPosition,
            width: width,
            height: height
        });
        var imageToInit = new Image();

        imageToInit.src = imageSrc;

        imageToInit.onload = function () {
            KonvaImage.image(imageToInit);
            layer.draw();
        };
        return KonvaImage;
    }

</script>